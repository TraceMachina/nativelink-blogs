bazel_dep(name = "hermetic_cc_toolchain", version = "4.0.0")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "rules_shell", version = "0.4.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Minimal C++ toolchain required internally by rules_python.
cc_toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(cc_toolchains, "zig_sdk")

# Python configuration
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = "3.13")

# Python packages
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    # CPU-only torch is not available in the regular pypi repositories.
    experimental_index_url = "https://pypi.org/simple",
    experimental_index_url_overrides = {
        "torch": "https://download.pytorch.org/whl/cpu",
    },
    hub_name = "pypi",
    python_version = "3.13",
    # This file may be regenerated via `bazel run //:requirements.update`.
    requirements_linux = "//:requirements.lock",
)
use_repo(pip, "pypi")

# UV toolchain config for regenerating the lockfile
uv = use_extension(
    "@rules_python//python/uv:uv.bzl",
    "uv",
    dev_dependency = True,
)
uv.configure(
    # Latest version that supports the old URL schema used in rules_python.
    version = "0.6.5",
)
