[project]
name = "finetuning_on_cpu"
version = "0.1.0"
description = "An example ML training setup using Bazel"
requires-python = ">=3.13"
dependencies = [
    "numpy",
    "datasets",
    "torch",
    "transformers[torch]",
]

[tool.hatch.build.targets.wheel]
packages = ["training"]

[project.optional-dependencies]
dev = [
    "ruff"
]

[tool.ruff]
line-length = 80
target-version = "py313"
namespace-packages = ["training"]

[tool.ruff.lint]
select = [
    "AIR",   # Airflow
    "ERA",   # eradicate
    "FAST",  # FastAPI
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FIX",   # flake8-fixme
    "FA",    # flake8-future-annotations
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "LOG",   # flake8-logging
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "SLOT",  # flake8-slots
    "TID",   # flake8-tidy-imports
    "TD",    # flake8-todos
    "TC",    # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "FLY",   # flynt
    "I",     # isort
    "C90",   # mccabe
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "N",     # pep8-naming
    "PERF",  # Perflint
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "D",     # pydocstyle
    "F",     # Pyflakes
    "PGH",   # pygrep-hooks
    "PLC",   # Pylint convention
    "PLE",   # Pylint error
    "PLR",   # Pylint refactor
    "PLW",   # Pylint warning
    "UP",    # pyupgrade
    "FURB",  # refurb
    "RUF",   # Ruff-specific rules
    "TRY",   # tryceratops
]
ignore = [
    "COM812" # Incompatible with the formatter
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.uv.sources]
torch = { index = "pytorch-cpu" }
